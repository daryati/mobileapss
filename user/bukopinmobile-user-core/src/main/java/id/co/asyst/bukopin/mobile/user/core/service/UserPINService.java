/*
 * $Id$
 * 
 * Copyright (c) 2019 Aero Systems Indonesia, PT.
 * All rights reserved.
 * 
 * AERO SYSTEMS INDONESIA PROPRIETARY/CONFIDENTIAL. Use is subject to
 * license terms.
 */
package id.co.asyst.bukopin.mobile.user.core.service;

import java.util.List;
import java.util.Locale;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import id.co.asyst.bukopin.mobile.common.core.util.BkpmUtil;
import id.co.asyst.bukopin.mobile.common.core.util.CryptoUtil;
import id.co.asyst.bukopin.mobile.common.core.util.MessageUtil;
import id.co.asyst.bukopin.mobile.common.model.BkpmConstants;
import id.co.asyst.bukopin.mobile.common.model.ResponseMessage;
import id.co.asyst.bukopin.mobile.common.model.payload.CommonResponse;
import id.co.asyst.bukopin.mobile.service.core.CentagateService;
import id.co.asyst.bukopin.mobile.service.model.payload.CentagateCommonResponse;
import id.co.asyst.bukopin.mobile.service.model.payload.ChallengeQuestionRequest;
import id.co.asyst.bukopin.mobile.service.model.payload.QuestionAuthRequest;
import id.co.asyst.bukopin.mobile.user.core.repository.UserPINRepository;
import id.co.asyst.bukopin.mobile.user.core.util.AuthUtil;
import id.co.asyst.bukopin.mobile.user.model.centagate.ReqQAChallengeResultData;
import id.co.asyst.bukopin.mobile.user.model.entity.User;
import id.co.asyst.bukopin.mobile.user.model.entity.UserPIN;
import id.co.asyst.foundation.service.connector.Services;

/**
 * Service Implementation for managing UserPIN.
 * 
 * @author Eka Ariyansyah
 * @version $Revision$, Nov 3, 2019
 * @since 1.0.Alpha1-SNAPSHOT
 */
@Service
@Transactional
public class UserPINService {
    
    /**
     * Logger.
     */
    private final Logger log = LoggerFactory.getLogger(UserTokenService.class);
    
    /**
     * Message failed message
     */
    private static final String CTG_AUTH_FAILED_MSG = "Invalid credentials";
    
    /**
     * User PIN Repository
     */
    private final UserPINRepository userPINRepository;
    
    /**
     * User Repository (auto-wired, this means to get the bean called
     * <code>userRepository</code>. Which is auto-generated by Spring, we will use
     * it to handle the data).
     */
    @Autowired
    private UserService userService;
    
    /**
     * Get Message Util
     */
    @Autowired
    private MessageUtil messageUtil;
    
    /**
     * Constructor
     * 
     * @param userPINRepository The userPINRepository Bean
     */
    public UserPINService(UserPINRepository userPINRepository) {
	this.userPINRepository = userPINRepository;
    }
    
    /**
     * Save a User PIN
     * 
     * @param userPIN The userPIN to save.
     * @return The persisted userPIN.
     */
    public UserPIN save(UserPIN userPIN) {
	log.debug("Request to save UserPIN : {}");
	return userPINRepository.save(userPIN);
    }
    
    /**
     * Verify User's PIN
     * 
     * @param username The Username of PIN owner 
     * @param encryptedPin The encrypted PIN
     * @param locale The Locale from HttpServletRequest
     * @return Verify status
     * @throws Exception
     */
    public CommonResponse verifyPIN(String username, String encryptedPin, Locale locale) throws Exception { 
	ObjectMapper mapper = new ObjectMapper();
	CentagateCommonResponse secQAuthRes = new CentagateCommonResponse();
	CommonResponse response = new CommonResponse(ResponseMessage.SUCCESS.getCode(),
		messageUtil.get("success", locale));
	
	// decrypted password
	String pin = CryptoUtil.decryptPassword(encryptedPin);

	// get challenge request
	log.debug("Get Question for user " + username);
	ChallengeQuestionRequest getQuestReq = AuthUtil.generateChallengeRequest(username, "");
	CentagateCommonResponse getQuestCTGRes = Services.create(CentagateService.class).requestQuestion(getQuestReq)
		.execute().body();

	if (BkpmConstants.CODE_CTG_SUCCESS.equals(getQuestCTGRes.getCode())) {
	    // mapping result
	    List<ReqQAChallengeResultData> getQuestResCTGObj = mapper.readValue(
		    String.valueOf(getQuestCTGRes.getObject()), new TypeReference<List<ReqQAChallengeResultData>>() {
		    });

	    // verify PIN
	    QuestionAuthRequest secQAuthReq = AuthUtil.generateSecurityQuestionAuthRequest(username,
		    getQuestResCTGObj.get(0).getId(), pin);
	    secQAuthRes = Services.create(CentagateService.class).authPin(secQAuthReq).execute().body();

	    if (!BkpmConstants.CODE_CTG_SUCCESS.equals(secQAuthRes.getCode())) {
		if (CTG_AUTH_FAILED_MSG.equalsIgnoreCase(secQAuthRes.getMessage())) {
		    response.setCode(ResponseMessage.DATA_NOT_MATCH.getCode());
		    response.setMessage(messageUtil.get("auth.pin.failed", locale));
		} else if (BkpmConstants.CODE_STG_USER_LOCKED.equals(secQAuthRes.getCode())) {
		    log.error("user is locked: " + username);
		    response = new CommonResponse(ResponseMessage.USER_IS_LOCKED.getCode(),
			    messageUtil.get("user.locked", locale));
		    
		    // update user locked
		    User uLogin = userService.findUserByUsername(username);
		    if (uLogin == null) {
			log.error("user is not register: " + username);
			response = new CommonResponse(ResponseMessage.USER_NOT_REGISTERED.getCode(),
				messageUtil.get("user.not.register", new Object[] { username },
					locale));
			return response;
		    }
		    uLogin.setLocked(true);
		    userService.save(uLogin);
		} else {
		    response.setCode(ResponseMessage.INTERNAL_SERVER_ERROR.getCode());
		    response.setMessage(messageUtil.get("error.internal.server", locale));
		    log.error("Error : " + secQAuthRes.getMessage());
		}
	    }
	} else if (BkpmConstants.CODE_STG_USER_LOCKED.equals(getQuestCTGRes.getCode())) {
	    log.error("user is locked: " + username);
	    // update user locked
	    User uLogin = userService.findUserByUsername(username);
	    if (uLogin == null) {
		log.error("user is not register: " + username);
		response = new CommonResponse(ResponseMessage.USER_NOT_REGISTERED.getCode(),
			messageUtil.get("user.not.register", new Object[] { username },
				locale));
		return response;
	    }
	    uLogin.setLocked(true);
	    userService.save(uLogin);

	    response = new CommonResponse(ResponseMessage.USER_IS_LOCKED.getCode(),
		    messageUtil.get("user.locked", locale));
	} else if (BkpmConstants.CODE_CTG_USER_NOT_FOUND.equals(getQuestCTGRes.getCode())) {
	    log.error("User not found: {}", username);
	    String message = messageUtil.get("error.data.x.not.found", 
		    new Object[] { new String("USER"), username }, locale);
	    response = new CommonResponse(ResponseMessage.DATA_NOT_FOUND.getCode(), message);
	} else {
	    response.setCode(ResponseMessage.INTERNAL_SERVER_ERROR.getCode());
	    response.setMessage(messageUtil.get("error.internal.server", locale));
	    log.error("Error : " + getQuestCTGRes.getMessage());
	}
	
	return response;
    }
}
