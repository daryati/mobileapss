/*
 * $Id$
 * 
 * Copyright (c) 2019 Aero Systems Indonesia, PT.
 * All rights reserved.
 * 
 * AERO SYSTEMS INDONESIA PROPRIETARY/CONFIDENTIAL. Use is subject to
 * license terms.
 */
package id.co.asyst.bukopin.mobile.user.web.rest;

import java.net.URISyntaxException;
import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import id.co.asyst.bukopin.mobile.user.core.service.AccountBalanceService;
import id.co.asyst.bukopin.mobile.user.core.service.InquiryTransactionService;
import id.co.asyst.bukopin.mobile.user.core.service.MiniStatementService;
import id.co.asyst.bukopin.mobile.user.model.AccountBalanceReq;
import id.co.asyst.bukopin.mobile.user.model.AccountBalanceRes;
import id.co.asyst.bukopin.mobile.user.model.InquiryTransactionReq;
import id.co.asyst.bukopin.mobile.user.model.InquiryTransactionRes;
import id.co.asyst.bukopin.mobile.user.model.MiniStatementReq;
import id.co.asyst.bukopin.mobile.user.model.MiniStatementRes;


/**
 * REST Controller for managing Statement.
 * 
 * @author Kartika Dwi Handini
 * @version $Revision$,(Created on Nov 05, 2019)
 * @since 1.0.Alpha1
 */
@RestController
@RequestMapping("/api")
public class StatementController {
	/**
     * Logger.
     */
    private final Logger log = LoggerFactory.getLogger(StatementController.class);

    /* Constants: */

    /* Attributes: */

    /* Services: */
    /**
     * User Repository (auto-wired, this means to get the bean called
     * <code>userTokenRepository</code>. Which is auto-generated by Spring, we will
     * use it to handle the data).
     */
    @Autowired
    private MiniStatementService miniStatementService;

    /* Constructors: */
    /**
     * Default Constructor.
     */
    public StatementController() {
        // do nothing.
    }

    /* Getters & setters for attributes: */

    /* Functions: */
    /**
     * POST /getInquiryTransaction : get all Transaction.
     *
     * @return the response with status 200 (OK) and the list of Transaction in body.
     */
    @PostMapping("/getMiniStatement")
    public MiniStatementRes getMiniStatement(@Valid @RequestBody MiniStatementReq miniStatementReq) throws URISyntaxException {
        MiniStatementRes miniStatementResult = new MiniStatementRes();
        miniStatementResult = miniStatementService.getMiniStatement(miniStatementReq);
        return miniStatementResult;
    }
/*    
    @PostMapping("/getAccountBalance")
    public AccountBalanceRes getAccountBalance(@Valid @RequestBody AccountBalanceReq accountBalanceReq) throws URISyntaxException {
        log.debug("REST request to get account balance");
        return accountBalanceService.getAccountBalance(accountBalanceReq);
    }
    */
    
    

    /**
     * POST /userTokens : Creates a new UserToken.
     *
     * @param userToken The userToken to create.
     * @return The response with status 201 (Created) and with body of the new
     * UserToken, or with status 400 (Bad Request) if the userToken has already an ID.
     *//*
    @PostMapping("/userTokens")
    @ResponseStatus(HttpStatus.CREATED)
    public UserToken createUserToken(@Valid @RequestBody UserToken userToken) throws URISyntaxException {
        log.debug("REST request to save UserToken : {}", userToken);
        if (userToken.getId() != null) {
            // throw new BadRequestAlertException("A new userToken cannot already have an
            // ID", "UserToken", "idexists");
        }
        return userTokenService.save(userToken);
    }*/

    

    /* Overrides: */
}
