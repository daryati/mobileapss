/*
 * $Id$
 * 
 * Copyright (c) 2020 Aero Systems Indonesia, PT.
 * All rights reserved.
 * 
 * AERO SYSTEMS INDONESIA PROPRIETARY/CONFIDENTIAL. Use is subject to
 * license terms.
 */
package id.co.asyst.bukopin.mobile.user.web.rest;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import id.co.asyst.bukopin.mobile.common.core.service.LoggingService;
import id.co.asyst.bukopin.mobile.common.core.util.MessageUtil;
import id.co.asyst.bukopin.mobile.common.model.ResponseMessage;
import id.co.asyst.bukopin.mobile.common.model.payload.CommonResponse;
import id.co.asyst.bukopin.mobile.user.core.service.AccountCardService;
import id.co.asyst.bukopin.mobile.user.core.service.OTPService;
import id.co.asyst.bukopin.mobile.user.core.service.UserMailService;
import id.co.asyst.bukopin.mobile.user.core.service.UserService;
import id.co.asyst.bukopin.mobile.user.core.util.AuthUtil;
import id.co.asyst.bukopin.mobile.user.model.OTPTypeEnum;
import id.co.asyst.bukopin.mobile.user.model.entity.AccountCard;
import id.co.asyst.bukopin.mobile.user.model.entity.User;

/**
 * Test User module's email. 
 * 
 * @author Eka Ariyansyah
 * @version $Revision$, Mar 31, 2020
 * @since 1.1.Alpha1
 */
@RestController
@RequestMapping("/public/email")
@Profile("!prod")
public class UserMailController {
    /**
     * Logger.
     */
    private final Logger log = LoggerFactory.getLogger(UserMailController.class);
    
    /* Constants: */

    /* Attributes: */

    /* Beans: */
    /**
     * User Mail Service 
     */
    @Autowired
    private UserMailService userMailService;
    
    /**
     * Account Service
     */
    @Autowired
    private AccountCardService accountCardService;
    
    /**
     * User Repository (auto-wired, this means to get the bean called
     * <code>userRepository</code>. Which is auto-generated by Spring, we will use
     * it to handle the data).
     */
    @Autowired
    private UserService userService;
    
    /**
     * Logging Service 
     */
    @Autowired
    private LoggingService loggingService;
    
    /**
     * OTP Service (auto-wired, this means to get the bean called
     * <code>otpService</code>. Which is auto-generated by Spring, we will use it to
     * handle the data).
     */
    @Autowired
    private OTPService otpService;
    
    /**
     * Get Message Util
     */
    @Autowired
    private MessageUtil messageUtil;
    
    /**
     * Http Servlet Request
     */
    @Autowired
    private HttpServletRequest servletRequest;

    /* Constructors: */

    /* Getters & setters for attributes: */

    /* Getters & setters for transient attributes: */

    /* Functionalities: */
    /**
     * Send Activation Mail by Username 
     * @param username The Username to send activation mail.
     * @return Success if user exist, else false.
     */
    @GetMapping("/activation/{username}")
    public CommonResponse activation(@PathVariable String username) {
	CommonResponse response = new CommonResponse(ResponseMessage.SUCCESS.getCode(),
		messageUtil.get("success", servletRequest.getLocale()));

	log.info("Test mail Activation: {}", username);
	loggingService.logRequest(servletRequest, null);
	
	AccountCard accountCard = accountCardService.findByUsername(username);
	if (accountCard == null) {
	    log.error("Account not found: " + username);
	    String message = messageUtil.get("activation.failed", new Object[] { username },
		    servletRequest.getLocale());
	    response.setCode(ResponseMessage.ACTIVATION_USER_FAILED.getCode());
	    response.setMessage(message);
	} else {
	    String receiver = accountCard.getUser().getEmail();
	    // sent activation email
	    userMailService.sentActivationMail(receiver, accountCard, servletRequest.getLocale());
	}

	return response;
    }
    
    /**
     * Send Registration Mail by Username
     * @param username The Username to send activation mail.
     * @return Success if user exist, else false.
     */
    @GetMapping("/registration/{username}")
    public CommonResponse registration(@PathVariable String username) {
	CommonResponse response = new CommonResponse(ResponseMessage.SUCCESS.getCode(),
		messageUtil.get("success", servletRequest.getLocale()));
	
	log.info("Test mail Registration: {}", username);
	loggingService.logRequest(servletRequest, null);
	
	User user = userService.findUserByUsername(username);
	if(user==null) {
	    response.setCode(ResponseMessage.DATA_NOT_FOUND.getCode());
	    response.setMessage(messageUtil.get("error.data.not.found", servletRequest.getLocale()));
	    response.setData(null);
	} else {
	    String receiver = user.getEmail();
	    userMailService.sendRegistrationMail(receiver, servletRequest.getLocale());
	}
	
	return response;
    }
    
    /**
     * Send Forgot Password Mail by Username. This service will not reset the User's Password. 
     * @param username The Username to send activation mail.
     * @return Success if user exist, else false.
     */
    @GetMapping("/forgotPassword/{username}")
    public CommonResponse forgotPassword(@PathVariable String username) {
	CommonResponse response = new CommonResponse(ResponseMessage.SUCCESS.getCode(),
		messageUtil.get("success", servletRequest.getLocale()));
	
	log.info("Test mail Forgot Password: {}", username);
	loggingService.logRequest(servletRequest, null);
	
	User user = userService.findUserByUsername(username);
	int nChar = 10;
	String newPassword = AuthUtil.generatePassword(nChar);
	if(user==null) {
	    response.setCode(ResponseMessage.DATA_NOT_FOUND.getCode());
	    response.setMessage(messageUtil.get("error.data.not.found", servletRequest.getLocale()));
	    response.setData(null);
	} else {
	    userMailService.sendForgotPassword(user, newPassword, servletRequest.getLocale());
	}
	
	return response;
    }
    
    /**
     * Send OTP Mail by Username. This OTP is valid. 
     * @param username The Username to send activation mail.
     * @return Success if user exist, else false.
     * @throws IOException 
     * @throws NoSuchAlgorithmException 
     */
    @GetMapping("/sendOTPEmail/{username}")
    public CommonResponse sendOTPEmail(@PathVariable String username) throws NoSuchAlgorithmException, IOException {
	CommonResponse response = new CommonResponse(ResponseMessage.SUCCESS.getCode(),
		messageUtil.get("success", servletRequest.getLocale()));
	
	log.info("Test mail OTP: {}", username);
	loggingService.logRequest(servletRequest, null);
	
	User user = userService.findUserByUsername(username);
	if(user==null) {
	    response.setCode(ResponseMessage.DATA_NOT_FOUND.getCode());
	    response.setMessage(messageUtil.get("error.data.not.found", servletRequest.getLocale()));
	    response.setData(null);
	} else {
	    // send otp by email
	    response = otpService.sendOTP(user.getEmail(), OTPTypeEnum.EMAIL, servletRequest.getLocale(), null);
	    if (ResponseMessage.SUCCESS.getCode().equals(response.getCode())) {
		response.setMessage(messageUtil.get("success", servletRequest.getLocale()));
	    } else if (ResponseMessage.INTERNAL_SERVER_ERROR.getCode().equals(response.getCode())) {
		response.setMessage(messageUtil.get("error.internal.server", servletRequest.getLocale()));
	    } else {
		response.setMessage(messageUtil.get("send.otp.failed", servletRequest.getLocale()));
	    }
	}
	
	return response;
    }
    
    /* Overrides: */
}
